#!/usr/bin/python

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the total of the even-valued terms.

# my first implementation:
total = 0
max = 4000000

back2 = 0
back1 = 1
next = back2 + back1

while(next < max):
  back2 = back1
  back1 = next
  if (next % 2 == 0):
    total += next

  next = back2 + back1

print total

# if we look for just evens, we see see that the fib sequence is O, O, E, O, O, E, O, O, E
# from that, we can deduce the equation E = (x + 2y) + (2x + 3y), with x = y = 1 to start 
# this performs much quicker then, since we only need to calculate every third fibonacci number

total = 0
b2 = b1 = 1
def next (x,y): return x + 2 * y, 2 * x + 3 * y 

while(b2 <= max and b1 <= max):
  total += b2 + b1
  b2, b1 = next(b2, b1)

print total
